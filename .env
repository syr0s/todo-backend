##################################
# SERVER MAIN CONFIGURATION FILE #
##################################
# This is an example .env file, to provide you a documentation, how to setup the
# RESTful API. 
#
# It is highly recommended to exclude this file from any versioning
# control system and never commit the file to GitHub or any other service.
#
# Set the server to debug mode. This should be only the case in development
# environments. Set this to false on any production grade system!
DEBUG=true
#
#
#########################
# MONGODB CONFIGURATION #
#########################
#
# Hostname or IP address of the MongoDB database instance.
MONGODB_HOST=127.0.0.1
#
# Port the MongoDB database is listening on.
MONGODB_PORT=27017
#
# Name of the database.
MONGODB_DATABASE=todo-backend
#
# Username of the database user, which has read/write access on the database.
MONGODB_USERNAME=backenduser
#
# Password of the database user. The password requires a minimum length of 32
# characters, containing at least:
#   - one lowercase character
#   - one uppercase character
#   - one numeric value
#   - one special character
# Otherwise, the server will throw an exception on startup.
# Attention, do not use the `$` as a password character, this will cause a failure
# in the `docker-compose` setup.
MONGODB_PASSWORD=mySuperS3cureP!ssw0rdWhichIsReallyLong
#
#
#######################
# REDIS CONFIGURATION #
#######################
#
# Hostname or IP address of the Redis instance.
REDIS_HOST=127.0.0.1
#
# Port the Redis instance is listening on.
REDIS_PORT=6379
#
# Password of the Redis user. The password requires a minimum length of 32
# characters, containing at least:
#   - one lowercase character
#   - one uppercase character
#   - one numeric value
#   - one special character
# Otherwise, the server will throw an exception on startup.
# Attention, do not use the `$` as a password character, this will cause a failure
# in the `docker-compose` setup.
REDIS_PASSWORD=mySuperS3cureP!ssw0rdWhichIsReallyLong
#
#
#####################
# RSA CONFIGURATION #
#####################
#
# A very secure passphrase to encrypt your serverÂ´s private key it is recommended
# to use a passphrase with a minimum length of 256 alphanumeric characters.
# If you do not provide a passphrase or the length of the given passphrase is
# below 256 characters, the server will throw an exception on startup.
#
# If you change the passphrase, on server restart, your private key will become
# unavailable. In such scenarios, the RESTful API will generate a new RSA key
# pair. Please note, that this will cause, that all signed json web tokens will
# become unavailable. This means, all clients have to re-login to the API.
RSA_PASSPHRASE=Tt2E5HMFNi44JF3btPBXNVZduURXf55YUuBu2uNM7AujFVe4EiSVeBfxYTU2hE8mP9gKevVkgkuiJYCQPx55Y3cFYfr4pnQ27dHcbGCet5TKQakt6nTJ47QPdLFkGfdQNeD3S7XDkMJgcdt7dSebUT6GGvVQt3uzhXBMpuLPB4TeEXaVzL6ZgRBTp8QdycbaQrVBq5GJ4KVcBxZMA2CzGyG4DVfkbzFMCvQui4tVGRXHgZ3h4R5bXJZxbAwR6a7L
#
# You may want to provide a specific path you store your server RSA keys. Please
# note, that this path is located within the applications root directory. By
# default, the server will store the keys at `${baseDir}/.keys/`
RSA_PATH_TO_KEYS=.keys/